#include <bits/stdc++.h>
using namespace std;

class Graph{
    int V;
    list<int> *adj;
    void DFSUtil(int v, vector<bool> &visited);
    public:
    Graph(int V);
    void addEdge(int u, int v);
    void DFS();
};

Graph::Graph(int V){
    this->V = V;
    adj = new list<int> [V];
}

void Graph::addEdge(int u, int v){
    adj[u].push_back(v);
}

void Graph::DFSUtil(int v, vector<bool> &visited){
    stack<int> st;
    st.push(v);
    while(!st.empty()){
        v = st.top();
        st.pop();
         
        cout << v << " ";
        visited[v] = true;
        
        for(auto it = adj[v].begin(); it != adj[v].end(); it++)
            if(!visited[*it])
                st.push(*it);
    }
}

void Graph::DFS(){
    vector<bool> visited(V, false);
    
    for(int i = 0; i < V; i++)
        if(!visited[i])
            DFSUtil(i, visited);
}

int main() {
    Graph g(5);  
    g.addEdge(1, 0); 
    g.addEdge(2, 1); 
    g.addEdge(3, 4); 
    g.addEdge(4, 0); 
    g.DFS();
    return 0;
}
