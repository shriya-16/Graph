#include <bits/stdc++.h>
using namespace std;

class Graph{
  int V;
  list<int> *adj;
  public:
  Graph(int V);
  void addEdge(int u, int v);
  void BFS(int start);
};

Graph::Graph(int V){
  this->V = V;
  adj = new list<int>[V];
}

void Graph::addEdge(int u, int v){
  adj[u].push_back(v);
}

void Graph::BFS(int start){
  bool visited[V];
  memset(visited, false, sizeof(visited));
  queue<int> q;
  q.push(s);
  visited[s] = treu;
  while(!q.empty()){
    int t = q.front();
    q.pop();
    cout << t << " ";
    list<int>::iterator it;
    for(it = adj[s].begin(); it != adj[s].end(); it++)
      if(!visited[*it])
        q.push(*it);
  }
}

int main(){
  Graph g(4);
  g.addEdge(0, 1); 
  g.addEdge(0, 2); 
  g.addEdge(1, 2); 
  g.addEdge(2, 0); 
  g.addEdge(2, 3); 
  g.addEdge(3, 3);
  BFS(2);
}
